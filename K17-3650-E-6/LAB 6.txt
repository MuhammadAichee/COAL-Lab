INCLUDE Irvine32.inc
.data
sval SBYTE -5 
svall SBYTE -6
.code
main PROC
mov eax, 0
mov ebx, 0
;mov al, sval ;wrong 
movsx eax, sval ;right
movsx ebx, svall
add eax, ebx
call writeint
call crlf


exit
main ENDP
END main









INCLUDE Irvine32.inc
.data

.code
main PROC
mov ax, 1111000000000000b
mov bx, 1001000000000000b
AND ax, bx
mov ebx, 0
call writebinb

exit
main ENDP
END main







INCLUDE Irvine32.inc
.data

.code
main PROC
mov ax, 1111000000000000b
mov bx, 1001000011100000b
OR ax, bx
mov ebx, 2
call writebinb

exit





INCLUDE Irvine32.inc
.data
msg1 BYTE "Values are equal",0
msg2 BYTE "Values are not equal",0
msg3 BYTE "First value is smaller",0
.code
main PROC
mov al, 10
mov bl, 50
CMP al, bl
JZ _equal
mov edx, OFFSET msg2
call WriteString
call crlf
A:
mov edx, OFFSET msg3
call WriteString 
call crlf
exit
_equal:
mov edx, OFFSET msg1
call WriteString 
call crlf

exit
main ENDP
END main





INCLUDE Irvine32.inc
.data
array1 BYTE 1,2,3,4,5
array2 BYTE 1,2,3,4,6 
msg BYTE "ARRAY ARE NOT EQUAL",0
msg1 BYTE "ARRAY ARE EQUAL",0
.code
main PROC
mov eax, 0
mov ebx, 0
mov ecx, 0
mov cl, 5
mov esi,0
L1:
	mov al,array1[esi*TYPE array1]
	mov bl,array2[esi*TYPE array2]
	CMP al, bl
	JNE A
	inc esi
LOOP L1
mov edx, offset msg1
call WriteString
call crlf
exit
A: 
mov edx, offset msg
call WriteString
call crlf
exit
main ENDP
END main
main ENDP
END main